/**
 * @class PDisplayField
 * @extends Widget
 * @param config {Object} Configuration object
 * @constructor
 * @description A representation of an individual form field.
 */

Y.PDisplayField = Y.Base.create('p-display-field', Y.Widget, [Y.WidgetParent, Y.WidgetChild], {
    toString: function() {
        return this.name;
    },

    /**
     * @property PDisplayField.FIELD_TEMPLATE
     * @type String
     * @description Template used to render the field node
     */
    FIELD_TEMPLATE : '<span>',

    /**
     * @property PDisplayField.FIELD_CLASS
     * @type String
     * @description CSS class used to locate a placeholder for
     *     the field node and style it.
     */
    FIELD_CLASS : 'table-layout-cell',

    /**
     * @property _fieldNode
     * @protected
     * @type Object
     * @description The form field itself
     */
    _fieldNode: null,

    /**
     * @method _renderNode
     * @protected
     * @description Helper method to render new nodes, possibly replacing
     *     markup placeholders.
     */
    _renderNode : function (nodeTemplate, nodeClass, nodeBefore) {
        if (!nodeTemplate) {
            return null;
        }
        var contentBox = this.get('contentBox'),
            node = Y.Node.create(nodeTemplate),
            placeHolder = contentBox.one('.' + nodeClass);

        node.addClass(nodeClass);

        if (placeHolder) {
            placeHolder.replace(node);
        } else {
            if (nodeBefore) {
                contentBox.insertBefore(node, nodeBefore);
            } else {
                contentBox.appendChild(node);
            }
        }

        return node;
    },

    /**
     * @method _renderFieldNode
     * @protected
     * @description Draws the field node into the contentBox
     */
    _renderFieldNode: function() {
        var contentBox = this.get('contentBox'),
        field = contentBox.one('#' + this.get('id'));

        if (!field) {
            field = this._renderNode(this.FIELD_TEMPLATE, this.FIELD_CLASS);
        }

        this._fieldNode = field;
    },

    /**
     * @method _syncFieldNode
     * @protected
     * @description Syncs the fieldNode and this instances attributes
     */
    _syncFieldNode: function() {
    	this._fieldNode.setHTML(this.get('value'));
    },

    /**
     * @method clear
     * @description Clears the value AND the initial value of this field
     */
    clear: function() {
        this.set('value', '');
        this._fieldNode.setHTML("");
    },

    initializer: function() {
    	var self = this;
        this.publish('blur');
        this.publish('change');
        this.publish('focus');
        this.publish('clear');
        this.publish('nodeReset');
    },

    destructor: function(config) {

    },

    renderUI: function() {
        this._renderFieldNode();
    },

    bindUI: function() {
    	this.on('valueChange', Y.bind(function(e) {
            if (e.src != 'ui') {
                this._fieldNode.setHTML(e.newVal);
            }
        },
        this));
    },

    syncUI: function() {
        this.get('boundingBox').removeAttribute('tabindex');
        this._syncFieldNode();
    }
},
{
    /**
     * @property PDisplayField.ATTRS
     * @type Object
     * @protected
     * @static
     */
    ATTRS: {
        /**
         * @attribute id
         * @type String
         * @default Either a user defined ID or a randomly generated by Y.guid()
         * @description A randomly generated ID that will be assigned to the field and used 
         * in the label's for attribute
         */
        id: {
            value: Y.guid(),
            validator: Y.Lang.isString,
            writeOnce: true
        },

        /**
         * @attribute name
         * @type String
         * @default ""
         * @writeOnce
         * @description The name attribute to use on the field
         */
        name: {
            validator: Y.Lang.isString,
            writeOnce: true
        },
        
        dataSetId: {
            validator: Y.Lang.isString,
            writeOnce: true
        },

        /**
         * @attribute value
         * @type String
         * @default ""
         * @description The current value of the form field
         */
        value: {
            value: '',
            validator: Y.Lang.isString
        }
    }
});
